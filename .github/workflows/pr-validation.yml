name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Quick validation for draft PRs
  draft-validation:
    name: Draft PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install basic dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest black flake8
    
    - name: Quick syntax check
      run: |
        python -m py_compile src/*.py scripts/*.py
        python -m py_compile tests/unit/*.py tests/integration/*.py
    
    - name: Basic code formatting check
      run: |
        black --check src/ scripts/ || echo "‚ö†Ô∏è Code formatting issues found - run 'black src/ scripts/' to fix"
    
    - name: Basic linting
      run: |
        flake8 src/ scripts/ --max-line-length=88 --extend-ignore=E203,W503 || echo "‚ö†Ô∏è Linting issues found"
    
    - name: Comment on PR
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üîç **Draft PR Validation Complete**\n\n' +
                  'Basic syntax and formatting checks passed. ' +
                  'Full test suite will run when the PR is marked as ready for review.'
          })

  # Full validation for ready PRs
  pr-full-validation:
    name: Full PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    strategy:
      matrix:
        test-category: ['fast', 'medium', 'data_quality']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch more history for better diff analysis
        fetch-depth: 10
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev libspatialindex-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests for category ${{ matrix.test-category }}
      run: |
        if [ "${{ matrix.test-category }}" = "data_quality" ]; then
          # Data quality tests may not have data in CI
          if [ -d "data/raw_csv" ] && [ "$(ls -A data/raw_csv)" ]; then
            pytest -xvs -m "${{ matrix.test-category }}" --tb=short
          else
            echo "Skipping data quality tests - no data files found"
          fi
        else
          pytest -xvs -m "${{ matrix.test-category }}" --tb=short --maxfail=5
        fi

  # Check for breaking changes
  breaking-changes-check:
    name: Breaking Changes Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
    
    - name: Checkout main branch
      uses: actions/checkout@v4
      with:
        ref: main
        path: main-branch
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check for API changes in main functions
      run: |
        # Check if critical function signatures changed
        echo "Checking for breaking changes in critical functions..."
        
        # Compare function signatures (simplified check)
        python -c "
        import sys
        sys.path.insert(0, '.')
        from src.functions import detect_wucher_miete, detect_neighbor_outliers
        print('Current PR - detect_wucher_miete signature:', detect_wucher_miete.__annotations__)
        print('Current PR - detect_neighbor_outliers signature:', detect_neighbor_outliers.__annotations__)
        " > pr_signatures.txt
        
        cd main-branch
        python -c "
        import sys
        sys.path.insert(0, '.')
        try:
            from src.functions import detect_wucher_miete, detect_neighbor_outliers
            print('Main branch - detect_wucher_miete signature:', detect_wucher_miete.__annotations__)
            print('Main branch - detect_neighbor_outliers signature:', detect_neighbor_outliers.__annotations__)
        except Exception as e:
            print('Could not load functions from main branch:', e)
        " > ../main_signatures.txt
        
        cd ..
        
        # Compare signatures (basic check)
        if diff -q pr_signatures.txt main_signatures.txt > /dev/null; then
          echo "‚úÖ No breaking changes detected in function signatures"
        else
          echo "‚ö†Ô∏è Potential breaking changes detected:"
          diff pr_signatures.txt main_signatures.txt || true
        fi

  # Performance comparison
  performance-comparison:
    name: Performance Comparison
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false && contains(github.event.pull_request.body, '[performance]')
    
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev libspatialindex-dev
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run performance benchmarks
      run: |
        pytest -xvs -m "performance" \
               --tb=short \
               --durations=0 \
               --benchmark-json=pr_benchmarks.json || true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: pr-performance-results
        path: pr_benchmarks.json

  # Documentation and README validation
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check README exists and is not empty
      run: |
        if [ ! -f README.md ]; then
          echo "‚ùå README.md not found"
          exit 1
        fi
        
        if [ ! -s README.md ]; then
          echo "‚ùå README.md is empty"
          exit 1
        fi
        
        echo "‚úÖ README.md exists and has content"
    
    - name: Check for TODO comments in new code
      run: |
        # Check for TODO comments in changed files
        git diff --name-only origin/main...HEAD | grep -E '\.(py|md)$' | xargs grep -n "TODO\|FIXME\|XXX" && \
        echo "‚ö†Ô∏è Found TODO/FIXME comments in changed files - consider addressing them" || \
        echo "‚úÖ No TODO/FIXME comments found in changed files"
    
    - name: Validate Python docstrings
      run: |
        python -c "
        import ast
        import sys
        from pathlib import Path
        
        def check_docstrings(file_path):
            with open(file_path, 'r') as f:
                tree = ast.parse(f.read())
            
            issues = []
            for node in ast.walk(tree):
                if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
                    if not ast.get_docstring(node):
                        issues.append(f'{node.name} (line {node.lineno})')
            
            return issues
        
        # Check main source files
        src_files = Path('src').glob('*.py')
        total_issues = 0
        
        for file_path in src_files:
            issues = check_docstrings(file_path)
            if issues:
                print(f'Missing docstrings in {file_path}:')
                for issue in issues:
                    print(f'  - {issue}')
                total_issues += len(issues)
        
        if total_issues > 0:
            print(f'‚ö†Ô∏è Found {total_issues} functions/classes without docstrings')
        else:
            print('‚úÖ All functions and classes have docstrings')
        "

  # Final PR status check
  pr-status-check:
    name: PR Status Check
    runs-on: ubuntu-latest
    needs: [pr-full-validation, breaking-changes-check, documentation-check]
    if: always() && github.event.pull_request.draft == false
    
    steps:
    - name: Check all validations
      run: |
        echo "PR Validation Summary:"
        echo "Full validation: ${{ needs.pr-full-validation.result }}"
        echo "Breaking changes check: ${{ needs.breaking-changes-check.result }}"
        echo "Documentation check: ${{ needs.documentation-check.result }}"
        
        if [[ "${{ needs.pr-full-validation.result }}" == "success" && \
              "${{ needs.breaking-changes-check.result }}" == "success" && \
              "${{ needs.documentation-check.result }}" == "success" ]]; then
          echo "‚úÖ All PR validations passed! Ready for review."
          exit 0
        else
          echo "‚ùå Some PR validations failed. Please check the details above."
          exit 1
        fi
    
    - name: Comment PR status
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const validationResult = '${{ needs.pr-full-validation.result }}';
          const breakingChangesResult = '${{ needs.breaking-changes-check.result }}';
          const docsResult = '${{ needs.documentation-check.result }}';
          
          let emoji = '‚úÖ';
          let status = 'All validations passed!';
          
          if (validationResult !== 'success' || breakingChangesResult !== 'success' || docsResult !== 'success') {
            emoji = '‚ùå';
            status = 'Some validations failed. Please check the workflow logs.';
          }
          
          const body = `${emoji} **PR Validation Results**\n\n` +
                      `- Tests: ${validationResult}\n` +
                      `- Breaking Changes: ${breakingChangesResult}\n` +
                      `- Documentation: ${docsResult}\n\n` +
                      `**Status:** ${status}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
