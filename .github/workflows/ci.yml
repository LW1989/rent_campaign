name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION_MATRIX: '["3.9", "3.10", "3.11"]'

jobs:
  # Fast tests that run on every push/PR
  fast-tests:
    name: Fast Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: requirements.txt
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev
        sudo apt-get install -y libspatialindex-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist  # For parallel test execution
    
    - name: Verify installation
      run: |
        python -c "import geopandas; print(f'GeoPandas: {geopandas.__version__}')"
        python -c "import xarray; print(f'xarray: {xarray.__version__}')"
        python -c "import pytest; print(f'pytest: {pytest.__version__}')"
    
    - name: Run fast tests
      run: |
        pytest -xvs -m "fast" \
               --cov=src \
               --cov-report=xml \
               --cov-report=term-missing \
               --tb=short \
               -n auto
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: fast-tests
        name: fast-tests-coverage

  # Medium tests for integration validation
  integration-tests:
    name: Integration Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: fast-tests
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]  # Run on fewer versions for speed
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: requirements.txt
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev libspatialindex-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        pytest -xvs -m "medium or integration" \
               --cov=src \
               --cov-report=xml \
               --tb=short \
               --maxfail=3
    
    - name: Upload integration coverage
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration-tests
        name: integration-tests-coverage

  # Data quality tests (only run if data files are present)
  data-quality-tests:
    name: Data Quality Tests
    runs-on: ubuntu-latest
    needs: fast-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev libspatialindex-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check for data files
      id: check-data
      run: |
        if [ -d "data/raw_csv" ] && [ "$(ls -A data/raw_csv)" ]; then
          echo "data_exists=true" >> $GITHUB_OUTPUT
        else
          echo "data_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Run data quality tests
      if: steps.check-data.outputs.data_exists == 'true'
      run: |
        pytest -xvs -m "data_quality" \
               --tb=short \
               --maxfail=5
    
    - name: Skip data quality tests
      if: steps.check-data.outputs.data_exists == 'false'
      run: |
        echo "Skipping data quality tests - no data files found"
        echo "This is expected for public repositories without data"

  # Code quality and linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt
    
    - name: Check code formatting with Black
      run: |
        black --check --diff src/ tests/ scripts/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ tests/ scripts/
    
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ scripts/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Type checking with mypy (optional)
      continue-on-error: true
      run: |
        mypy src/ --ignore-missing-imports

  # Performance regression tests (only on main branch)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [fast-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gdal-bin libgdal-dev libspatialindex-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run performance tests
      run: |
        pytest -xvs -m "performance" \
               --tb=short \
               --maxfail=3 \
               --durations=10

  # Test matrix completion check
  test-matrix-complete:
    name: Test Matrix Complete
    runs-on: ubuntu-latest
    needs: [fast-tests, integration-tests, code-quality]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.fast-tests.result }}" == "success" && \
              "${{ needs.integration-tests.result }}" == "success" && \
              "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "✅ All required tests passed!"
          exit 0
        else
          echo "❌ Some tests failed:"
          echo "Fast tests: ${{ needs.fast-tests.result }}"
          echo "Integration tests: ${{ needs.integration-tests.result }}"
          echo "Code quality: ${{ needs.code-quality.result }}"
          exit 1
        fi
